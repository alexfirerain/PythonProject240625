LETTERS = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя"
LETTERS_CAP = LETTERS.upper()

ENCRYPT_TRIGGERS = {'E', 'T', 'I', '~', 'Е', 'Ш', 'Э', 'Ё', 'У', 'ШИФРОВАТЬ',
                    'ЗАШИФРОВАТЬ', 'ШИФРУЙ', 'ЗАШИФРУЙ', 'ШИФР'}
DECRYPT_TRIGGERS = {'D', 'L', 'Д', 'Р', 'В', 'РАСШИФРОВАТЬ', 'ДЕШИФРОВАТЬ'}
SETTING_TRIGGERS = {'S', 'C', 'С', 'Ы', 'СДВИГ'}
HELP_TRIGGERS = {'H', '{', '[', '?', 'Х', 'П', 'СПРАВКА', 'ПОМОЩЬ'}
QUIT_TRIGGERS = {'Q', 'X', 'Z', 'Й', 'Ч', 'ВЫХОД'}

SYMBOLS = {LETTERS, LETTERS_CAP}  # можно добавить любые наборы символов
SHIFT_DEFAULT = 3  # сдвиг по умолчанию

WELCOME = """Добро пожаловать в Кайсаратор!
Введите
    E для шифрования
    D для дешифрования
    S для установки сдвига
    H для помощи
    Q для выхода"""

HELP = """
Программа "Кайсаратор" используется для шифрования и дешифрования строки
'методом Цезаря', её название происходит от аутентичного произношения его
имени: 'Кайсар'.

В начале работы Программы выводится приветствие и список команд.
Команды не чувствительны к регистру. По умолчанию даны команды в виде
латинских букв:

    'E' - шифрование:
        После появления приглашения "> " введите строку для шифрования 
        и нажмите <ВВОД>. Будет выведена зашифрованная строка, полученная из
        данной применением 'метода Цезаря' с установленным в Программе сдвигом.
        Синонимы: { 'T', 'I', '~' }
        Синонимы кириллицей: { 'Е', 'Ш', 'Э', 'Ё', 'У', 'ШИФРОВАТЬ',
                    'ЗАШИФРОВАТЬ', 'ШИФРУЙ', 'ЗАШИФРУЙ', 'ШИФР' }
        
    'D' - дешифрование:
        После появления приглашения "> " введите зашифрованную тем же методом
        строку и нажмите <ВВОД>. Будет выведена расшифровка этой строки с
        помощью 'метода Цезаря' с установленным в Программе сдвигом.
        Синонимы: { 'L' }
        Синонимы кириллицей: { 'Д', 'Р', 'В', 'РАСШИФРОВАТЬ', 'ДЕШИФРОВАТЬ' }
        
    'S' - установка сдвига:
        Выводится текущее значение сдвига и приглашение "> " — введите новое
        значение сдвига, которое будет установлено, или просто <ВВОД> для
        подтверждения текущего значения.
        В начале работы Программы значение по умолчанию равно 3.
        Не делается никаких проверок на корректность ввода или кратность
        этого числа длине какого-либо набора символов.
        Синонимы: { 'C' }
        Синонимы кириллицей: { 'С', 'Ы', 'СДВИГ' }
        
    'H' - помощь:
        Выводится этот текст.
        Синонимы: { '{', '[', '?' }
        Синонимы кириллицей: { 'Х', 'П', 'СПРАВКА', 'ПОМОЩЬ' }
        
    'Q' - выход:
        Выход из программы.
        Синонимы: { 'X', 'Z' }
        Синонимы кириллицей: { 'Й', 'Ч', 'ВЫХОД' }
    

Для каждого символа шифруемой строки Кайсаратор ищет его в заданных наборах
символов. Если символ найден в одном из наборов, то он заменяется символом,
циклически отстоящим по индексу в этом наборе на величину сдвига. Если не
найден ни в каком, то остаётся без шифрования.
Расшифровка производится по тому же принципу с обратным значением сдвига.

В данной реализации использован набор символов из 33 строчных букв русской
азбуки, а также его копия в заглавном регистре. Для добавления других наборов
символов следует в данном файле определить строку, содержащую новый набор,
и добавить её в список SYMBOLS.
"""

GOODBYE = "Спасибо за использование Кайсаратора!"

print(WELCOME)
shift = SHIFT_DEFAULT
while (command := input().strip().upper()) not in QUIT_TRIGGERS:

    if command in HELP_TRIGGERS:
        print(HELP)

    elif command in SETTING_TRIGGERS:
        if (new_shift := input(f"Сдвиг = {shift} > ").strip()) != "":
            shift = int(new_shift)

    elif command in ENCRYPT_TRIGGERS or command in DECRYPT_TRIGGERS:
        output = ""
        if command in ENCRYPT_TRIGGERS:
            shifting = shift
        else:
            shifting = -shift
        for letter in (word := input("> ")):
            mapped_symbol = False
            for symbol_set in SYMBOLS:
                if letter in symbol_set:
                    mapped_symbol = True
                    output += symbol_set[(symbol_set.index(letter) +
                                          shifting) % len(symbol_set)]
                    break
            if not mapped_symbol:
                output += letter
        print(output)

print(GOODBYE)
